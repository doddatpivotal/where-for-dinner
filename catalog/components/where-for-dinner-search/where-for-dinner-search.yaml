apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: where-for-dinner-search
  annotations:
    "backstage.io/kubernetes-label-selector": "app.kubernetes.io/part-of=where-for-dinner-search"
spec:
  type: service
  lifecycle: experimental
  owner: where-for-dinner-team
  system: where-for-dinner
  providesApis:
    - where-for-dinner-search
  dependsOn: 
    - resource:where-for-dinner-db
    - resource:where-for-dinner-messaging
    - component:where-for-dinner-search-proc
---
apiVersion: backstage.io/v1alpha1
kind: API
metadata:
  name: where-for-dinner-search
  description: The Search API
  tags:
    - api
    - tanzu
spec:
  type: openapi
  lifecycle: experimental
  owner: where-for-dinner-team
  system: where-for-dinner
  definition: |
    openapi: 3.0.1
    info:
      title: Where for Dinner Search Service
      description: Core Where for Dinner service for submitting searches and parameters
    servers:
    - url: https://where-for-dinner.cody.full.tanzu-azure-lab.winterfell.online/api/search/
      description: Generated server url
    tags:
    - name: Search Submission REST API
      description: CRUD operations for submiting, retrieving, and deleting searches
    paths:
      "/search":
        get:
          tags:
          - search-resource
          summary: Get all submitted searches
          description: Returns all submitted searches for a given logged on user.  If
            a logged on user is not present, then a default principal representing non
            logged on users is applied.
          operationId: getAllSearches
          responses:
            '200':
              description: Returns all searches for a user or an empty list if no search
                are found.
              content:
                "*/*":
                  schema:
                    type: array
                    items:
                      "$ref": "#/components/schemas/Search"
        put:
          tags:
          - search-resource
          summary: Submits a new search.
          description: Submits a new search with a set of search parameters for a logged
            on user.  If a logged on user is not present, then a default principal representing
            non logged on users is applied.
          operationId: addSearch
          requestBody:
            content:
              application/json:
                schema:
                  "$ref": "#/components/schemas/Search"
            required: true
          responses:
            '201':
              description: The search was successfully submitted
              content:
                "*/*":
                  schema:
                    "$ref": "#/components/schemas/Search"
            '400':
              description: The search time window has already passed
            '409':
              description: A search with the same name for the calling user already exists
      "/search/{id}":
        delete:
          tags:
          - search-resource
          summary: Deletes submitted search.
          description: Deletes an existing submitted search.  If a logged on user is not
            present, then a default principal representing non logged on users is applied.
          operationId: deleteSearch
          parameters:
          - name: id
            in: path
            required: true
            schema:
              type: integer
              format: int64
          responses:
            '200':
              description: The search was successfully deleted
    components:
      schemas:
        Search:
          type: object
          properties:
            id:
              type: integer
              format: int64
            name:
              type: string
            startTime:
              type: integer
              format: int64
            endTime:
              type: integer
              format: int64
            diningTypes:
              type: string
            diningNames:
              type: string
            postalCode:
              type: string
            radius:
              type: integer
              format: int32
            continousSearch:
              type: boolean
            requestSubject:
              type: string

